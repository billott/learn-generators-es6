
nodeschool at Hilti
November 15 2017

https://github.com/isRuslan/learn-generators

> npm install learn-generators
> learn-generators -l en

Write some code in a file...

1-run-stop-run
2-gernerate-iterator
3-delegating-generators
4-catch-error
5-look-sync-do-async
6-look-sync-make-promise

My Solution
-----------
2-gernerate-iterator-solution.js
3-delegating-generators-solution.js
4-catch-error-solution.js
5-look-sync-do-async-solution.js
6-look-sync-make-promise-solution.js

> learn-generators run mysolution.js

1-run-stop-run-solution.js

C:\xps13\wksp\a-nodeschool\learn-generators>

Learn Generators
──────────────────
 RUN STOP RUN
 Exercise 1 of 6

Introduction to ES6 Generators.

## Info

Generators are functions which can be stopped while in process
and run later as many times as you want. Example:

    function *foo () {
      var stop = yield 'woo';
      console.log(stop, 'inside foo');
    }
    var G = foo();

    console.log( G.next() );
    // { value: 'woo', done: false }
    console.log( G.next('bar') );
    // 'bar', 'inside foo'
    // { value: undefined, done: true }

What was that? There are some new things to notice:

1) * - just a sign that foo is generator. You can put it anywhere between
the function keyword and the function name, it does not matter exactly where.

2) The yield expression - stop the generator and send out woo string.
This pauses the state of the generator until we call next (see 3) below).
We restart the generator by sending bar string into foo which becomes the
value returned by the yield expression inside foo (which gets assigned
to stop). Context between all run -> stop -> run will be saved.

3) foo function has next method that returns an object like
{value: VALUE_FROM_YIELD, done: IS_THIS_FINISHED}.

## Docs

  * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*
  * http://wiki.ecmascript.org/doku.php?id=harmony:generators

## Task

Write a range generator-function that takes from and to arguments.

Print the numbers as strings within the specified range, one per line.

Follow this boilerplate:

    function *range(from, to) {
      // your code goes here
    }

    for (var r of range(5, 10)) {
        console.log( r );
    }
    // should print: 5, 6, 7, 8, 9, 10


 » To print these instructions again, run: learn-generators print
 » To execute your program in a test environment, run: learn-generators run program.js
 » To verify your program, run: learn-generators verify program.js
 » For help run: learn-generators help



C:\xps13\wksp\a-nodeschool\learn-generators>
